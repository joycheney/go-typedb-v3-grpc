// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/typedb-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TypeDB_ConnectionOpen_FullMethodName            = "/typedb.protocol.TypeDB/connection_open"
	TypeDB_AuthenticationTokenCreate_FullMethodName = "/typedb.protocol.TypeDB/authentication_token_create"
	TypeDB_ServersAll_FullMethodName                = "/typedb.protocol.TypeDB/servers_all"
	TypeDB_UsersGet_FullMethodName                  = "/typedb.protocol.TypeDB/users_get"
	TypeDB_UsersAll_FullMethodName                  = "/typedb.protocol.TypeDB/users_all"
	TypeDB_UsersContains_FullMethodName             = "/typedb.protocol.TypeDB/users_contains"
	TypeDB_UsersCreate_FullMethodName               = "/typedb.protocol.TypeDB/users_create"
	TypeDB_UsersUpdate_FullMethodName               = "/typedb.protocol.TypeDB/users_update"
	TypeDB_UsersDelete_FullMethodName               = "/typedb.protocol.TypeDB/users_delete"
	TypeDB_DatabasesGet_FullMethodName              = "/typedb.protocol.TypeDB/databases_get"
	TypeDB_DatabasesAll_FullMethodName              = "/typedb.protocol.TypeDB/databases_all"
	TypeDB_DatabasesContains_FullMethodName         = "/typedb.protocol.TypeDB/databases_contains"
	TypeDB_DatabasesCreate_FullMethodName           = "/typedb.protocol.TypeDB/databases_create"
	TypeDB_DatabasesImport_FullMethodName           = "/typedb.protocol.TypeDB/databases_import"
	TypeDB_DatabaseSchema_FullMethodName            = "/typedb.protocol.TypeDB/database_schema"
	TypeDB_DatabaseTypeSchema_FullMethodName        = "/typedb.protocol.TypeDB/database_type_schema"
	TypeDB_DatabaseDelete_FullMethodName            = "/typedb.protocol.TypeDB/database_delete"
	TypeDB_DatabaseExport_FullMethodName            = "/typedb.protocol.TypeDB/database_export"
	TypeDB_Transaction_FullMethodName               = "/typedb.protocol.TypeDB/transaction"
)

// TypeDBClient is the client API for TypeDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypeDBClient interface {
	// Connection API
	ConnectionOpen(ctx context.Context, in *Connection_Open_Req, opts ...grpc.CallOption) (*Connection_Open_Res, error)
	// Authentication API
	AuthenticationTokenCreate(ctx context.Context, in *Authentication_Token_Create_Req, opts ...grpc.CallOption) (*Authentication_Token_Create_Res, error)
	// Server Manager API
	ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error)
	// User Manager API
	UsersGet(ctx context.Context, in *UserManager_Get_Req, opts ...grpc.CallOption) (*UserManager_Get_Res, error)
	UsersAll(ctx context.Context, in *UserManager_All_Req, opts ...grpc.CallOption) (*UserManager_All_Res, error)
	UsersContains(ctx context.Context, in *UserManager_Contains_Req, opts ...grpc.CallOption) (*UserManager_Contains_Res, error)
	UsersCreate(ctx context.Context, in *UserManager_Create_Req, opts ...grpc.CallOption) (*UserManager_Create_Res, error)
	// User API
	UsersUpdate(ctx context.Context, in *User_Update_Req, opts ...grpc.CallOption) (*User_Update_Res, error)
	UsersDelete(ctx context.Context, in *User_Delete_Req, opts ...grpc.CallOption) (*User_Delete_Res, error)
	// Database Manager API
	DatabasesGet(ctx context.Context, in *DatabaseManager_Get_Req, opts ...grpc.CallOption) (*DatabaseManager_Get_Res, error)
	DatabasesAll(ctx context.Context, in *DatabaseManager_All_Req, opts ...grpc.CallOption) (*DatabaseManager_All_Res, error)
	DatabasesContains(ctx context.Context, in *DatabaseManager_Contains_Req, opts ...grpc.CallOption) (*DatabaseManager_Contains_Res, error)
	DatabasesCreate(ctx context.Context, in *DatabaseManager_Create_Req, opts ...grpc.CallOption) (*DatabaseManager_Create_Res, error)
	DatabasesImport(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DatabaseManager_Import_Client, DatabaseManager_Import_Server], error)
	// Database API
	DatabaseSchema(ctx context.Context, in *Database_Schema_Req, opts ...grpc.CallOption) (*Database_Schema_Res, error)
	DatabaseTypeSchema(ctx context.Context, in *Database_TypeSchema_Req, opts ...grpc.CallOption) (*Database_TypeSchema_Res, error)
	DatabaseDelete(ctx context.Context, in *Database_Delete_Req, opts ...grpc.CallOption) (*Database_Delete_Res, error)
	DatabaseExport(ctx context.Context, in *Database_Export_Req, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Database_Export_Server], error)
	// Transaction Streaming API
	// Opens a bi-directional stream representing a stateful transaction, streaming
	// requests and responses back-and-forth. The first transaction client message must
	// be {Transaction.Open.Req}. Closing the stream closes the transaction.
	Transaction(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Transaction_Client, Transaction_Server], error)
}

type typeDBClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeDBClient(cc grpc.ClientConnInterface) TypeDBClient {
	return &typeDBClient{cc}
}

func (c *typeDBClient) ConnectionOpen(ctx context.Context, in *Connection_Open_Req, opts ...grpc.CallOption) (*Connection_Open_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Connection_Open_Res)
	err := c.cc.Invoke(ctx, TypeDB_ConnectionOpen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) AuthenticationTokenCreate(ctx context.Context, in *Authentication_Token_Create_Req, opts ...grpc.CallOption) (*Authentication_Token_Create_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authentication_Token_Create_Res)
	err := c.cc.Invoke(ctx, TypeDB_AuthenticationTokenCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerManager_All_Res)
	err := c.cc.Invoke(ctx, TypeDB_ServersAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) UsersGet(ctx context.Context, in *UserManager_Get_Req, opts ...grpc.CallOption) (*UserManager_Get_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserManager_Get_Res)
	err := c.cc.Invoke(ctx, TypeDB_UsersGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) UsersAll(ctx context.Context, in *UserManager_All_Req, opts ...grpc.CallOption) (*UserManager_All_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserManager_All_Res)
	err := c.cc.Invoke(ctx, TypeDB_UsersAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) UsersContains(ctx context.Context, in *UserManager_Contains_Req, opts ...grpc.CallOption) (*UserManager_Contains_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserManager_Contains_Res)
	err := c.cc.Invoke(ctx, TypeDB_UsersContains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) UsersCreate(ctx context.Context, in *UserManager_Create_Req, opts ...grpc.CallOption) (*UserManager_Create_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserManager_Create_Res)
	err := c.cc.Invoke(ctx, TypeDB_UsersCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) UsersUpdate(ctx context.Context, in *User_Update_Req, opts ...grpc.CallOption) (*User_Update_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User_Update_Res)
	err := c.cc.Invoke(ctx, TypeDB_UsersUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) UsersDelete(ctx context.Context, in *User_Delete_Req, opts ...grpc.CallOption) (*User_Delete_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User_Delete_Res)
	err := c.cc.Invoke(ctx, TypeDB_UsersDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesGet(ctx context.Context, in *DatabaseManager_Get_Req, opts ...grpc.CallOption) (*DatabaseManager_Get_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseManager_Get_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabasesGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesAll(ctx context.Context, in *DatabaseManager_All_Req, opts ...grpc.CallOption) (*DatabaseManager_All_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseManager_All_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabasesAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesContains(ctx context.Context, in *DatabaseManager_Contains_Req, opts ...grpc.CallOption) (*DatabaseManager_Contains_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseManager_Contains_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabasesContains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesCreate(ctx context.Context, in *DatabaseManager_Create_Req, opts ...grpc.CallOption) (*DatabaseManager_Create_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseManager_Create_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabasesCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesImport(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DatabaseManager_Import_Client, DatabaseManager_Import_Server], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TypeDB_ServiceDesc.Streams[0], TypeDB_DatabasesImport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DatabaseManager_Import_Client, DatabaseManager_Import_Server]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TypeDB_DatabasesImportClient = grpc.BidiStreamingClient[DatabaseManager_Import_Client, DatabaseManager_Import_Server]

func (c *typeDBClient) DatabaseSchema(ctx context.Context, in *Database_Schema_Req, opts ...grpc.CallOption) (*Database_Schema_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Database_Schema_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabaseSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabaseTypeSchema(ctx context.Context, in *Database_TypeSchema_Req, opts ...grpc.CallOption) (*Database_TypeSchema_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Database_TypeSchema_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabaseTypeSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabaseDelete(ctx context.Context, in *Database_Delete_Req, opts ...grpc.CallOption) (*Database_Delete_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Database_Delete_Res)
	err := c.cc.Invoke(ctx, TypeDB_DatabaseDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabaseExport(ctx context.Context, in *Database_Export_Req, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Database_Export_Server], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TypeDB_ServiceDesc.Streams[1], TypeDB_DatabaseExport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Database_Export_Req, Database_Export_Server]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TypeDB_DatabaseExportClient = grpc.ServerStreamingClient[Database_Export_Server]

func (c *typeDBClient) Transaction(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Transaction_Client, Transaction_Server], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TypeDB_ServiceDesc.Streams[2], TypeDB_Transaction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Transaction_Client, Transaction_Server]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TypeDB_TransactionClient = grpc.BidiStreamingClient[Transaction_Client, Transaction_Server]

// TypeDBServer is the server API for TypeDB service.
// All implementations must embed UnimplementedTypeDBServer
// for forward compatibility.
type TypeDBServer interface {
	// Connection API
	ConnectionOpen(context.Context, *Connection_Open_Req) (*Connection_Open_Res, error)
	// Authentication API
	AuthenticationTokenCreate(context.Context, *Authentication_Token_Create_Req) (*Authentication_Token_Create_Res, error)
	// Server Manager API
	ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error)
	// User Manager API
	UsersGet(context.Context, *UserManager_Get_Req) (*UserManager_Get_Res, error)
	UsersAll(context.Context, *UserManager_All_Req) (*UserManager_All_Res, error)
	UsersContains(context.Context, *UserManager_Contains_Req) (*UserManager_Contains_Res, error)
	UsersCreate(context.Context, *UserManager_Create_Req) (*UserManager_Create_Res, error)
	// User API
	UsersUpdate(context.Context, *User_Update_Req) (*User_Update_Res, error)
	UsersDelete(context.Context, *User_Delete_Req) (*User_Delete_Res, error)
	// Database Manager API
	DatabasesGet(context.Context, *DatabaseManager_Get_Req) (*DatabaseManager_Get_Res, error)
	DatabasesAll(context.Context, *DatabaseManager_All_Req) (*DatabaseManager_All_Res, error)
	DatabasesContains(context.Context, *DatabaseManager_Contains_Req) (*DatabaseManager_Contains_Res, error)
	DatabasesCreate(context.Context, *DatabaseManager_Create_Req) (*DatabaseManager_Create_Res, error)
	DatabasesImport(grpc.BidiStreamingServer[DatabaseManager_Import_Client, DatabaseManager_Import_Server]) error
	// Database API
	DatabaseSchema(context.Context, *Database_Schema_Req) (*Database_Schema_Res, error)
	DatabaseTypeSchema(context.Context, *Database_TypeSchema_Req) (*Database_TypeSchema_Res, error)
	DatabaseDelete(context.Context, *Database_Delete_Req) (*Database_Delete_Res, error)
	DatabaseExport(*Database_Export_Req, grpc.ServerStreamingServer[Database_Export_Server]) error
	// Transaction Streaming API
	// Opens a bi-directional stream representing a stateful transaction, streaming
	// requests and responses back-and-forth. The first transaction client message must
	// be {Transaction.Open.Req}. Closing the stream closes the transaction.
	Transaction(grpc.BidiStreamingServer[Transaction_Client, Transaction_Server]) error
	mustEmbedUnimplementedTypeDBServer()
}

// UnimplementedTypeDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTypeDBServer struct{}

func (UnimplementedTypeDBServer) ConnectionOpen(context.Context, *Connection_Open_Req) (*Connection_Open_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionOpen not implemented")
}
func (UnimplementedTypeDBServer) AuthenticationTokenCreate(context.Context, *Authentication_Token_Create_Req) (*Authentication_Token_Create_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationTokenCreate not implemented")
}
func (UnimplementedTypeDBServer) ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersAll not implemented")
}
func (UnimplementedTypeDBServer) UsersGet(context.Context, *UserManager_Get_Req) (*UserManager_Get_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGet not implemented")
}
func (UnimplementedTypeDBServer) UsersAll(context.Context, *UserManager_All_Req) (*UserManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersAll not implemented")
}
func (UnimplementedTypeDBServer) UsersContains(context.Context, *UserManager_Contains_Req) (*UserManager_Contains_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersContains not implemented")
}
func (UnimplementedTypeDBServer) UsersCreate(context.Context, *UserManager_Create_Req) (*UserManager_Create_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCreate not implemented")
}
func (UnimplementedTypeDBServer) UsersUpdate(context.Context, *User_Update_Req) (*User_Update_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersUpdate not implemented")
}
func (UnimplementedTypeDBServer) UsersDelete(context.Context, *User_Delete_Req) (*User_Delete_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersDelete not implemented")
}
func (UnimplementedTypeDBServer) DatabasesGet(context.Context, *DatabaseManager_Get_Req) (*DatabaseManager_Get_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesGet not implemented")
}
func (UnimplementedTypeDBServer) DatabasesAll(context.Context, *DatabaseManager_All_Req) (*DatabaseManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesAll not implemented")
}
func (UnimplementedTypeDBServer) DatabasesContains(context.Context, *DatabaseManager_Contains_Req) (*DatabaseManager_Contains_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesContains not implemented")
}
func (UnimplementedTypeDBServer) DatabasesCreate(context.Context, *DatabaseManager_Create_Req) (*DatabaseManager_Create_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesCreate not implemented")
}
func (UnimplementedTypeDBServer) DatabasesImport(grpc.BidiStreamingServer[DatabaseManager_Import_Client, DatabaseManager_Import_Server]) error {
	return status.Errorf(codes.Unimplemented, "method DatabasesImport not implemented")
}
func (UnimplementedTypeDBServer) DatabaseSchema(context.Context, *Database_Schema_Req) (*Database_Schema_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseSchema not implemented")
}
func (UnimplementedTypeDBServer) DatabaseTypeSchema(context.Context, *Database_TypeSchema_Req) (*Database_TypeSchema_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseTypeSchema not implemented")
}
func (UnimplementedTypeDBServer) DatabaseDelete(context.Context, *Database_Delete_Req) (*Database_Delete_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseDelete not implemented")
}
func (UnimplementedTypeDBServer) DatabaseExport(*Database_Export_Req, grpc.ServerStreamingServer[Database_Export_Server]) error {
	return status.Errorf(codes.Unimplemented, "method DatabaseExport not implemented")
}
func (UnimplementedTypeDBServer) Transaction(grpc.BidiStreamingServer[Transaction_Client, Transaction_Server]) error {
	return status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedTypeDBServer) mustEmbedUnimplementedTypeDBServer() {}
func (UnimplementedTypeDBServer) testEmbeddedByValue()                {}

// UnsafeTypeDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypeDBServer will
// result in compilation errors.
type UnsafeTypeDBServer interface {
	mustEmbedUnimplementedTypeDBServer()
}

func RegisterTypeDBServer(s grpc.ServiceRegistrar, srv TypeDBServer) {
	// If the following call pancis, it indicates UnimplementedTypeDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TypeDB_ServiceDesc, srv)
}

func _TypeDB_ConnectionOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection_Open_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).ConnectionOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_ConnectionOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).ConnectionOpen(ctx, req.(*Connection_Open_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_AuthenticationTokenCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authentication_Token_Create_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).AuthenticationTokenCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_AuthenticationTokenCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).AuthenticationTokenCreate(ctx, req.(*Authentication_Token_Create_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_ServersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).ServersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_ServersAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).ServersAll(ctx, req.(*ServerManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_UsersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManager_Get_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).UsersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_UsersGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).UsersGet(ctx, req.(*UserManager_Get_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_UsersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).UsersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_UsersAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).UsersAll(ctx, req.(*UserManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_UsersContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManager_Contains_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).UsersContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_UsersContains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).UsersContains(ctx, req.(*UserManager_Contains_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_UsersCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManager_Create_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).UsersCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_UsersCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).UsersCreate(ctx, req.(*UserManager_Create_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_UsersUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Update_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).UsersUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_UsersUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).UsersUpdate(ctx, req.(*User_Update_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_UsersDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Delete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).UsersDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_UsersDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).UsersDelete(ctx, req.(*User_Delete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseManager_Get_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabasesGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesGet(ctx, req.(*DatabaseManager_Get_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabasesAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesAll(ctx, req.(*DatabaseManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseManager_Contains_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabasesContains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesContains(ctx, req.(*DatabaseManager_Contains_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseManager_Create_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabasesCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesCreate(ctx, req.(*DatabaseManager_Create_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesImport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TypeDBServer).DatabasesImport(&grpc.GenericServerStream[DatabaseManager_Import_Client, DatabaseManager_Import_Server]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TypeDB_DatabasesImportServer = grpc.BidiStreamingServer[DatabaseManager_Import_Client, DatabaseManager_Import_Server]

func _TypeDB_DatabaseSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database_Schema_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabaseSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabaseSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabaseSchema(ctx, req.(*Database_Schema_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabaseTypeSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database_TypeSchema_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabaseTypeSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabaseTypeSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabaseTypeSchema(ctx, req.(*Database_TypeSchema_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabaseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database_Delete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabaseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeDB_DatabaseDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabaseDelete(ctx, req.(*Database_Delete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabaseExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Database_Export_Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TypeDBServer).DatabaseExport(m, &grpc.GenericServerStream[Database_Export_Req, Database_Export_Server]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TypeDB_DatabaseExportServer = grpc.ServerStreamingServer[Database_Export_Server]

func _TypeDB_Transaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TypeDBServer).Transaction(&grpc.GenericServerStream[Transaction_Client, Transaction_Server]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TypeDB_TransactionServer = grpc.BidiStreamingServer[Transaction_Client, Transaction_Server]

// TypeDB_ServiceDesc is the grpc.ServiceDesc for TypeDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypeDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "typedb.protocol.TypeDB",
	HandlerType: (*TypeDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connection_open",
			Handler:    _TypeDB_ConnectionOpen_Handler,
		},
		{
			MethodName: "authentication_token_create",
			Handler:    _TypeDB_AuthenticationTokenCreate_Handler,
		},
		{
			MethodName: "servers_all",
			Handler:    _TypeDB_ServersAll_Handler,
		},
		{
			MethodName: "users_get",
			Handler:    _TypeDB_UsersGet_Handler,
		},
		{
			MethodName: "users_all",
			Handler:    _TypeDB_UsersAll_Handler,
		},
		{
			MethodName: "users_contains",
			Handler:    _TypeDB_UsersContains_Handler,
		},
		{
			MethodName: "users_create",
			Handler:    _TypeDB_UsersCreate_Handler,
		},
		{
			MethodName: "users_update",
			Handler:    _TypeDB_UsersUpdate_Handler,
		},
		{
			MethodName: "users_delete",
			Handler:    _TypeDB_UsersDelete_Handler,
		},
		{
			MethodName: "databases_get",
			Handler:    _TypeDB_DatabasesGet_Handler,
		},
		{
			MethodName: "databases_all",
			Handler:    _TypeDB_DatabasesAll_Handler,
		},
		{
			MethodName: "databases_contains",
			Handler:    _TypeDB_DatabasesContains_Handler,
		},
		{
			MethodName: "databases_create",
			Handler:    _TypeDB_DatabasesCreate_Handler,
		},
		{
			MethodName: "database_schema",
			Handler:    _TypeDB_DatabaseSchema_Handler,
		},
		{
			MethodName: "database_type_schema",
			Handler:    _TypeDB_DatabaseTypeSchema_Handler,
		},
		{
			MethodName: "database_delete",
			Handler:    _TypeDB_DatabaseDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "databases_import",
			Handler:       _TypeDB_DatabasesImport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "database_export",
			Handler:       _TypeDB_DatabaseExport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "transaction",
			Handler:       _TypeDB_Transaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/typedb-service.proto",
}
