// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: database.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatabaseManager struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager) Reset() {
	*x = DatabaseManager{}
	mi := &file_database_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager) ProtoMessage() {}

func (x *DatabaseManager) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager.ProtoReflect.Descriptor instead.
func (*DatabaseManager) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0}
}

type DatabaseReplicas struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Name          string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Replicas      []*DatabaseReplicas_Replica `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseReplicas) Reset() {
	*x = DatabaseReplicas{}
	mi := &file_database_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseReplicas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseReplicas) ProtoMessage() {}

func (x *DatabaseReplicas) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseReplicas.ProtoReflect.Descriptor instead.
func (*DatabaseReplicas) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseReplicas) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseReplicas) GetReplicas() []*DatabaseReplicas_Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_database_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2}
}

type DatabaseManager_Get struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Get) Reset() {
	*x = DatabaseManager_Get{}
	mi := &file_database_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Get) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Get) ProtoMessage() {}

func (x *DatabaseManager_Get) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Get.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Get) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 0}
}

type DatabaseManager_All struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_All) Reset() {
	*x = DatabaseManager_All{}
	mi := &file_database_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_All) ProtoMessage() {}

func (x *DatabaseManager_All) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_All.ProtoReflect.Descriptor instead.
func (*DatabaseManager_All) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 1}
}

type DatabaseManager_Contains struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Contains) Reset() {
	*x = DatabaseManager_Contains{}
	mi := &file_database_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Contains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Contains) ProtoMessage() {}

func (x *DatabaseManager_Contains) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Contains.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Contains) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 2}
}

type DatabaseManager_Create struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Create) Reset() {
	*x = DatabaseManager_Create{}
	mi := &file_database_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Create) ProtoMessage() {}

func (x *DatabaseManager_Create) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Create.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Create) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 3}
}

type DatabaseManager_Import struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Import) Reset() {
	*x = DatabaseManager_Import{}
	mi := &file_database_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Import) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Import) ProtoMessage() {}

func (x *DatabaseManager_Import) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Import.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Import) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 4}
}

type DatabaseManager_Get_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Get_Req) Reset() {
	*x = DatabaseManager_Get_Req{}
	mi := &file_database_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Get_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Get_Req) ProtoMessage() {}

func (x *DatabaseManager_Get_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Get_Req.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Get_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *DatabaseManager_Get_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseManager_Get_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      *DatabaseReplicas      `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Get_Res) Reset() {
	*x = DatabaseManager_Get_Res{}
	mi := &file_database_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Get_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Get_Res) ProtoMessage() {}

func (x *DatabaseManager_Get_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Get_Res.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Get_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *DatabaseManager_Get_Res) GetDatabase() *DatabaseReplicas {
	if x != nil {
		return x.Database
	}
	return nil
}

type DatabaseManager_All_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_All_Req) Reset() {
	*x = DatabaseManager_All_Req{}
	mi := &file_database_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_All_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_All_Req) ProtoMessage() {}

func (x *DatabaseManager_All_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_All_Req.ProtoReflect.Descriptor instead.
func (*DatabaseManager_All_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 1, 0}
}

type DatabaseManager_All_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Databases     []*DatabaseReplicas    `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_All_Res) Reset() {
	*x = DatabaseManager_All_Res{}
	mi := &file_database_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_All_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_All_Res) ProtoMessage() {}

func (x *DatabaseManager_All_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_All_Res.ProtoReflect.Descriptor instead.
func (*DatabaseManager_All_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *DatabaseManager_All_Res) GetDatabases() []*DatabaseReplicas {
	if x != nil {
		return x.Databases
	}
	return nil
}

type DatabaseManager_Contains_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Contains_Req) Reset() {
	*x = DatabaseManager_Contains_Req{}
	mi := &file_database_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Contains_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Contains_Req) ProtoMessage() {}

func (x *DatabaseManager_Contains_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Contains_Req.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Contains_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *DatabaseManager_Contains_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseManager_Contains_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Contains      bool                   `protobuf:"varint,1,opt,name=contains,proto3" json:"contains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Contains_Res) Reset() {
	*x = DatabaseManager_Contains_Res{}
	mi := &file_database_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Contains_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Contains_Res) ProtoMessage() {}

func (x *DatabaseManager_Contains_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Contains_Res.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Contains_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *DatabaseManager_Contains_Res) GetContains() bool {
	if x != nil {
		return x.Contains
	}
	return false
}

type DatabaseManager_Create_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Create_Req) Reset() {
	*x = DatabaseManager_Create_Req{}
	mi := &file_database_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Create_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Create_Req) ProtoMessage() {}

func (x *DatabaseManager_Create_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Create_Req.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Create_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *DatabaseManager_Create_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseManager_Create_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      *DatabaseReplicas      `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Create_Res) Reset() {
	*x = DatabaseManager_Create_Res{}
	mi := &file_database_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Create_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Create_Res) ProtoMessage() {}

func (x *DatabaseManager_Create_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Create_Res.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Create_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *DatabaseManager_Create_Res) GetDatabase() *DatabaseReplicas {
	if x != nil {
		return x.Database
	}
	return nil
}

type DatabaseManager_Import_Client struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Client        *Migration_Import_Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Import_Client) Reset() {
	*x = DatabaseManager_Import_Client{}
	mi := &file_database_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Import_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Import_Client) ProtoMessage() {}

func (x *DatabaseManager_Import_Client) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Import_Client.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Import_Client) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *DatabaseManager_Import_Client) GetClient() *Migration_Import_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type DatabaseManager_Import_Server struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Server        *Migration_Import_Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseManager_Import_Server) Reset() {
	*x = DatabaseManager_Import_Server{}
	mi := &file_database_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManager_Import_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManager_Import_Server) ProtoMessage() {}

func (x *DatabaseManager_Import_Server) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManager_Import_Server.ProtoReflect.Descriptor instead.
func (*DatabaseManager_Import_Server) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *DatabaseManager_Import_Server) GetServer() *Migration_Import_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type DatabaseReplicas_Replica struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Primary       bool                   `protobuf:"varint,2,opt,name=primary,proto3" json:"primary,omitempty"`
	Preferred     bool                   `protobuf:"varint,3,opt,name=preferred,proto3" json:"preferred,omitempty"`
	Term          int64                  `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseReplicas_Replica) Reset() {
	*x = DatabaseReplicas_Replica{}
	mi := &file_database_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseReplicas_Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseReplicas_Replica) ProtoMessage() {}

func (x *DatabaseReplicas_Replica) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseReplicas_Replica.ProtoReflect.Descriptor instead.
func (*DatabaseReplicas_Replica) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DatabaseReplicas_Replica) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DatabaseReplicas_Replica) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *DatabaseReplicas_Replica) GetPreferred() bool {
	if x != nil {
		return x.Preferred
	}
	return false
}

func (x *DatabaseReplicas_Replica) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type Database_Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Schema) Reset() {
	*x = Database_Schema{}
	mi := &file_database_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Schema) ProtoMessage() {}

func (x *Database_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Schema.ProtoReflect.Descriptor instead.
func (*Database_Schema) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 0}
}

type Database_TypeSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_TypeSchema) Reset() {
	*x = Database_TypeSchema{}
	mi := &file_database_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_TypeSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_TypeSchema) ProtoMessage() {}

func (x *Database_TypeSchema) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_TypeSchema.ProtoReflect.Descriptor instead.
func (*Database_TypeSchema) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 1}
}

type Database_Export struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Export) Reset() {
	*x = Database_Export{}
	mi := &file_database_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Export) ProtoMessage() {}

func (x *Database_Export) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Export.ProtoReflect.Descriptor instead.
func (*Database_Export) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 2}
}

type Database_Delete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Delete) Reset() {
	*x = Database_Delete{}
	mi := &file_database_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Delete) ProtoMessage() {}

func (x *Database_Delete) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Delete.ProtoReflect.Descriptor instead.
func (*Database_Delete) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 3}
}

type Database_Schema_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Schema_Req) Reset() {
	*x = Database_Schema_Req{}
	mi := &file_database_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Schema_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Schema_Req) ProtoMessage() {}

func (x *Database_Schema_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Schema_Req.ProtoReflect.Descriptor instead.
func (*Database_Schema_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Database_Schema_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Database_Schema_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Schema_Res) Reset() {
	*x = Database_Schema_Res{}
	mi := &file_database_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Schema_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Schema_Res) ProtoMessage() {}

func (x *Database_Schema_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Schema_Res.ProtoReflect.Descriptor instead.
func (*Database_Schema_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *Database_Schema_Res) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type Database_TypeSchema_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_TypeSchema_Req) Reset() {
	*x = Database_TypeSchema_Req{}
	mi := &file_database_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_TypeSchema_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_TypeSchema_Req) ProtoMessage() {}

func (x *Database_TypeSchema_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_TypeSchema_Req.ProtoReflect.Descriptor instead.
func (*Database_TypeSchema_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *Database_TypeSchema_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Database_TypeSchema_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_TypeSchema_Res) Reset() {
	*x = Database_TypeSchema_Res{}
	mi := &file_database_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_TypeSchema_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_TypeSchema_Res) ProtoMessage() {}

func (x *Database_TypeSchema_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_TypeSchema_Res.ProtoReflect.Descriptor instead.
func (*Database_TypeSchema_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *Database_TypeSchema_Res) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type Database_Export_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Req           *Migration_Export_Req  `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Export_Req) Reset() {
	*x = Database_Export_Req{}
	mi := &file_database_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Export_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Export_Req) ProtoMessage() {}

func (x *Database_Export_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Export_Req.ProtoReflect.Descriptor instead.
func (*Database_Export_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *Database_Export_Req) GetReq() *Migration_Export_Req {
	if x != nil {
		return x.Req
	}
	return nil
}

type Database_Export_Server struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Server        *Migration_Export_Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Export_Server) Reset() {
	*x = Database_Export_Server{}
	mi := &file_database_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Export_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Export_Server) ProtoMessage() {}

func (x *Database_Export_Server) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Export_Server.ProtoReflect.Descriptor instead.
func (*Database_Export_Server) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (x *Database_Export_Server) GetServer() *Migration_Export_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type Database_Delete_Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Delete_Req) Reset() {
	*x = Database_Delete_Req{}
	mi := &file_database_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Delete_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Delete_Req) ProtoMessage() {}

func (x *Database_Delete_Req) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Delete_Req.ProtoReflect.Descriptor instead.
func (*Database_Delete_Req) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 3, 0}
}

func (x *Database_Delete_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Database_Delete_Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database_Delete_Res) Reset() {
	*x = Database_Delete_Res{}
	mi := &file_database_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database_Delete_Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database_Delete_Res) ProtoMessage() {}

func (x *Database_Delete_Res) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database_Delete_Res.ProtoReflect.Descriptor instead.
func (*Database_Delete_Res) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2, 3, 1}
}

var File_database_proto protoreflect.FileDescriptor

const file_database_proto_rawDesc = "" +
	"\n" +
	"\x0edatabase.proto\x12\x0ftypedb.protocol\x1a\x0fmigration.proto\"\xa7\x04\n" +
	"\x0fDatabaseManager\x1af\n" +
	"\x03Get\x1a\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x1aD\n" +
	"\x03Res\x12=\n" +
	"\bdatabase\x18\x01 \x01(\v2!.typedb.protocol.DatabaseReplicasR\bdatabase\x1aT\n" +
	"\x03All\x1a\x05\n" +
	"\x03Req\x1aF\n" +
	"\x03Res\x12?\n" +
	"\tdatabases\x18\x01 \x03(\v2!.typedb.protocol.DatabaseReplicasR\tdatabases\x1aH\n" +
	"\bContains\x1a\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x1a!\n" +
	"\x03Res\x12\x1a\n" +
	"\bcontains\x18\x01 \x01(\bR\bcontains\x1ai\n" +
	"\x06Create\x1a\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x1aD\n" +
	"\x03Res\x12=\n" +
	"\bdatabase\x18\x01 \x01(\v2!.typedb.protocol.DatabaseReplicasR\bdatabase\x1a\xa0\x01\n" +
	"\x06Import\x1aJ\n" +
	"\x06Client\x12@\n" +
	"\x06client\x18\x01 \x01(\v2(.typedb.protocol.Migration.Import.ClientR\x06client\x1aJ\n" +
	"\x06Server\x12@\n" +
	"\x06server\x18\x01 \x01(\v2(.typedb.protocol.Migration.Import.ServerR\x06server\"\xde\x01\n" +
	"\x10DatabaseReplicas\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12E\n" +
	"\breplicas\x18\x02 \x03(\v2).typedb.protocol.DatabaseReplicas.ReplicaR\breplicas\x1ao\n" +
	"\aReplica\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x18\n" +
	"\aprimary\x18\x02 \x01(\bR\aprimary\x12\x1c\n" +
	"\tpreferred\x18\x03 \x01(\bR\tpreferred\x12\x12\n" +
	"\x04term\x18\x04 \x01(\x03R\x04term\"\xd9\x02\n" +
	"\bDatabase\x1aB\n" +
	"\x06Schema\x1a\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x1a\x1d\n" +
	"\x03Res\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x1aF\n" +
	"\n" +
	"TypeSchema\x1a\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x1a\x1d\n" +
	"\x03Res\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x1a\x94\x01\n" +
	"\x06Export\x1a>\n" +
	"\x03Req\x127\n" +
	"\x03req\x18\x01 \x01(\v2%.typedb.protocol.Migration.Export.ReqR\x03req\x1aJ\n" +
	"\x06Server\x12@\n" +
	"\x06server\x18\x01 \x01(\v2(.typedb.protocol.Migration.Export.ServerR\x06server\x1a*\n" +
	"\x06Delete\x1a\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x1a\x05\n" +
	"\x03ResB1Z/github.com/joycheney/go-typedb-v3-grpc/pb/protob\x06proto3"

var (
	file_database_proto_rawDescOnce sync.Once
	file_database_proto_rawDescData []byte
)

func file_database_proto_rawDescGZIP() []byte {
	file_database_proto_rawDescOnce.Do(func() {
		file_database_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_database_proto_rawDesc), len(file_database_proto_rawDesc)))
	})
	return file_database_proto_rawDescData
}

var file_database_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_database_proto_goTypes = []any{
	(*DatabaseManager)(nil),               // 0: typedb.protocol.DatabaseManager
	(*DatabaseReplicas)(nil),              // 1: typedb.protocol.DatabaseReplicas
	(*Database)(nil),                      // 2: typedb.protocol.Database
	(*DatabaseManager_Get)(nil),           // 3: typedb.protocol.DatabaseManager.Get
	(*DatabaseManager_All)(nil),           // 4: typedb.protocol.DatabaseManager.All
	(*DatabaseManager_Contains)(nil),      // 5: typedb.protocol.DatabaseManager.Contains
	(*DatabaseManager_Create)(nil),        // 6: typedb.protocol.DatabaseManager.Create
	(*DatabaseManager_Import)(nil),        // 7: typedb.protocol.DatabaseManager.Import
	(*DatabaseManager_Get_Req)(nil),       // 8: typedb.protocol.DatabaseManager.Get.Req
	(*DatabaseManager_Get_Res)(nil),       // 9: typedb.protocol.DatabaseManager.Get.Res
	(*DatabaseManager_All_Req)(nil),       // 10: typedb.protocol.DatabaseManager.All.Req
	(*DatabaseManager_All_Res)(nil),       // 11: typedb.protocol.DatabaseManager.All.Res
	(*DatabaseManager_Contains_Req)(nil),  // 12: typedb.protocol.DatabaseManager.Contains.Req
	(*DatabaseManager_Contains_Res)(nil),  // 13: typedb.protocol.DatabaseManager.Contains.Res
	(*DatabaseManager_Create_Req)(nil),    // 14: typedb.protocol.DatabaseManager.Create.Req
	(*DatabaseManager_Create_Res)(nil),    // 15: typedb.protocol.DatabaseManager.Create.Res
	(*DatabaseManager_Import_Client)(nil), // 16: typedb.protocol.DatabaseManager.Import.Client
	(*DatabaseManager_Import_Server)(nil), // 17: typedb.protocol.DatabaseManager.Import.Server
	(*DatabaseReplicas_Replica)(nil),      // 18: typedb.protocol.DatabaseReplicas.Replica
	(*Database_Schema)(nil),               // 19: typedb.protocol.Database.Schema
	(*Database_TypeSchema)(nil),           // 20: typedb.protocol.Database.TypeSchema
	(*Database_Export)(nil),               // 21: typedb.protocol.Database.Export
	(*Database_Delete)(nil),               // 22: typedb.protocol.Database.Delete
	(*Database_Schema_Req)(nil),           // 23: typedb.protocol.Database.Schema.Req
	(*Database_Schema_Res)(nil),           // 24: typedb.protocol.Database.Schema.Res
	(*Database_TypeSchema_Req)(nil),       // 25: typedb.protocol.Database.TypeSchema.Req
	(*Database_TypeSchema_Res)(nil),       // 26: typedb.protocol.Database.TypeSchema.Res
	(*Database_Export_Req)(nil),           // 27: typedb.protocol.Database.Export.Req
	(*Database_Export_Server)(nil),        // 28: typedb.protocol.Database.Export.Server
	(*Database_Delete_Req)(nil),           // 29: typedb.protocol.Database.Delete.Req
	(*Database_Delete_Res)(nil),           // 30: typedb.protocol.Database.Delete.Res
	(*Migration_Import_Client)(nil),       // 31: typedb.protocol.Migration.Import.Client
	(*Migration_Import_Server)(nil),       // 32: typedb.protocol.Migration.Import.Server
	(*Migration_Export_Req)(nil),          // 33: typedb.protocol.Migration.Export.Req
	(*Migration_Export_Server)(nil),       // 34: typedb.protocol.Migration.Export.Server
}
var file_database_proto_depIdxs = []int32{
	18, // 0: typedb.protocol.DatabaseReplicas.replicas:type_name -> typedb.protocol.DatabaseReplicas.Replica
	1,  // 1: typedb.protocol.DatabaseManager.Get.Res.database:type_name -> typedb.protocol.DatabaseReplicas
	1,  // 2: typedb.protocol.DatabaseManager.All.Res.databases:type_name -> typedb.protocol.DatabaseReplicas
	1,  // 3: typedb.protocol.DatabaseManager.Create.Res.database:type_name -> typedb.protocol.DatabaseReplicas
	31, // 4: typedb.protocol.DatabaseManager.Import.Client.client:type_name -> typedb.protocol.Migration.Import.Client
	32, // 5: typedb.protocol.DatabaseManager.Import.Server.server:type_name -> typedb.protocol.Migration.Import.Server
	33, // 6: typedb.protocol.Database.Export.Req.req:type_name -> typedb.protocol.Migration.Export.Req
	34, // 7: typedb.protocol.Database.Export.Server.server:type_name -> typedb.protocol.Migration.Export.Server
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_database_proto_init() }
func file_database_proto_init() {
	if File_database_proto != nil {
		return
	}
	file_migration_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_database_proto_rawDesc), len(file_database_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_database_proto_goTypes,
		DependencyIndexes: file_database_proto_depIdxs,
		MessageInfos:      file_database_proto_msgTypes,
	}.Build()
	File_database_proto = out.File
	file_database_proto_goTypes = nil
	file_database_proto_depIdxs = nil
}
